{"version":3,"sources":["components/ListItem.js","components/AddItem.js","components/List.js","components/TaskManager.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","className","completed","onClick","e","handleCompleteTask","id","task","handleDeleteTask","AddItem","hangleChange","setState","value","target","onSubmit","preventDefault","state","length","handleAddTask","this","type","onChange","placeholder","Component","List","showCompleted","handleShowCompleted","tasks","map","index","key","title","TaskManager","saveToLocalStorage","json","JSON","stringify","localStorage","setItem","prevState","Date","now","taskToRemove","filter","taskToComplete","i","indexOf","findIndex","getItem","parse","prevProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAyBeA,EAvBE,SAACC,GAAD,OACb,4BACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,UACX,4BAAQA,UAAS,gBAAWD,EAAME,UAAY,UAAY,IAAMC,QAAS,SAACC,GACtEJ,EAAMK,mBAAmBL,EAAMM,OAGnC,0BAAML,UAAS,oBAAeD,EAAME,UAAY,YAAc,KAAOF,EAAMO,OAE/E,6BACI,4BAAQN,UAAU,wBAAwBE,QAAS,SAACC,GAC5CJ,EAAMQ,iBAAiBR,EAAMM,MADrC,OAQV,+BCWSG,EA9Bf,YACI,WAAYT,GAAQ,IAAD,8BACf,4CAAMA,KAIVU,aAAe,SAACN,GACZ,EAAKO,SAAS,CAACC,MAAOR,EAAES,OAAOD,SANhB,EAQnBE,SAAW,SAACV,GACRA,EAAEW,iBACF,IAAMH,EAAQ,EAAKI,MAAMJ,MACJ,IAAjBA,EAAMK,SACV,EAAKjB,MAAMkB,cAAcN,GACzB,EAAKD,SAAS,CAACC,MAAO,OAVtB,EAAKI,MAAQ,CAACJ,MAAO,IAHN,EADvB,sEAkBQ,OACI,0BAAME,SAAUK,KAAKL,UACjB,yBAAKb,UAAU,6BACX,4BAAQmB,KAAK,SAASnB,UAAU,sBAAhC,KACA,2BAAOmB,KAAK,OAAOR,MAAOO,KAAKH,MAAMJ,MAAOS,SAAUF,KAAKT,aAAcT,UAAU,aAAaqB,YAAY,gBAEhH,kCAxBhB,GAA6BC,aCsCdC,EApCF,SAACxB,GACV,OACI,6BACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,mBACX,0CACA,4BAAQA,UAAS,2CAAsCD,EAAMyB,cAAgB,OAAS,QAAUtB,QAASH,EAAM0B,qBAAsB1B,EAAMyB,cAAgB,OAAS,OAApK,gBAGR,yBAAKxB,UAAU,aACX,wBAAIA,UAAU,OAEND,EAAM2B,MAAMC,IAAI,SAACrB,EAAMsB,GAAP,OACXtB,EAAKL,WAAcK,EAAKL,WAAaF,EAAMyB,cAC5C,kBAAC,EAAD,CACInB,GAAIC,EAAKD,GACTwB,IAAKD,EACLtB,KAAMA,EAAKwB,MACX7B,UAAWK,EAAKL,UAChBM,iBAAkBR,EAAMQ,iBACxBH,mBAAoBL,EAAMK,qBAE5B,KAGV,4BACI,kBAAC,EAAD,CACIa,cAAelB,EAAMkB,qBC0ClCc,EAtEf,2MACIhB,MAAQ,CACJW,MAAO,GACPF,eAAe,GAHvB,EAkBIQ,mBAAqB,WACjB,IAAMC,EAAOC,KAAKC,UAAU,EAAKpB,MAAMW,OACvCU,aAAaC,QAAQ,QAASJ,IApBtC,EAuBIhB,cAAgB,SAACX,GACb,EAAKI,SAAS,SAAC4B,GAAD,MAAgB,CAC1BZ,MAAM,GAAD,mBAAMY,EAAUZ,OAAU,CAAC,CAACrB,GAAG,GAAD,OAAIkC,KAAKC,MAAT,YAAkBlC,GAAQwB,MAAOxB,EAAML,WAAW,SAzBjG,EA6BIM,iBAAmB,SAACkC,GAChB,EAAK/B,SAAS,SAAC4B,GAAD,MAAgB,CAC1BZ,MAAOY,EAAUZ,MAAMgB,OAAO,SAACpC,GAAD,OAAUmC,IAAiBnC,EAAKD,SA/B1E,EAmCID,mBAAqB,SAACuC,GAClB,IAAMjB,EAAQ,EAAKX,MAAMW,MAEnBkB,EAAIlB,EAAMmB,QAAQnB,EAAMA,EAAMoB,UAAU,SAACxC,GAAD,OAAUA,EAAKD,KAAOsC,MAEpEjB,EAAMkB,GAAG3C,WAAayB,EAAMkB,GAAG3C,UAC/B,EAAKS,SAAS,CACVgB,MAAOA,IAEX,EAAKM,sBA5Cb,EA+CIP,oBAAsB,SAACtB,GACnBA,EAAEW,iBACF,EAAKJ,SAAS,CACVc,eAAgB,EAAKT,MAAMS,iBAlDvC,mFAOQ,IAAMS,EAAOG,aAAaW,QAAQ,SAC5BrB,EAAQQ,KAAKc,MAAMf,GAErBP,GAAOR,KAAKR,SAAS,iBAAO,CAAEgB,aAV1C,yCAYuBuB,EAAWX,GACtBA,EAAUZ,MAAMV,SAAWE,KAAKH,MAAMW,MAAMV,QAC5CE,KAAKc,uBAdjB,+BAuDQ,OACI,6BACI,kBAAC,EAAD,CACIN,MAAOR,KAAKH,MAAMW,MAClBF,cAAeN,KAAKH,MAAMS,cAC1BP,cAAeC,KAAKD,cACpBV,iBAAkBW,KAAKX,iBACvBH,mBAAoBc,KAAKd,mBACzBqB,oBAAqBP,KAAKO,2BA/D9C,GAAiCH,aCSlB4B,MARf,WACE,OACE,yBAAKlD,UAAU,OACb,kBAAC,EAAD,QCKcmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.618601a4.chunk.js","sourcesContent":["import React from 'react';\n\nconst ListItem = (props) => (\n    <li>\n        <div className=\"task\">\n            <div className=\"d-flex\">\n                <button className={`check ${props.completed ? 'checked' : ''}`} onClick={(e) => {\n                    props.handleCompleteTask(props.id);\n                }}\n                ></button>\n                <span className={`task-name ${props.completed ? 'completed' : ''}`}>{props.task}</span>\n            </div>\n            <div>\n                <button className=\"button button__delete\" onClick={(e) => {\n                        props.handleDeleteTask(props.id);\n                    }}\n                >\n                    x\n                </button>\n            </div>\n      </div>\n      <hr></hr>\n    </li>\n);\n\nexport default ListItem;\n","import React, { Component } from 'react';\n\nexport class AddItem extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {value: ''};\n    }\n    hangleChange = (e) => {\n        this.setState({value: e.target.value});\n    }\n    onSubmit = (e) => {\n        e.preventDefault();\n        const value = this.state.value;\n        if (value.length === 0) return; \n        this.props.handleAddTask(value);\n        this.setState({value: ''});\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.onSubmit}>\n                <div className=\"d-flex align-items-center\">\n                    <button type=\"submit\" className=\"button button__add\">+</button> \n                    <input type=\"text\" value={this.state.value} onChange={this.hangleChange} className=\"input__add\" placeholder=\"Add a task\"/>\n                </div>\n                <hr/>\n            </form>\n          );\n    }\n}\n\nexport default AddItem;\n","import React from 'react';\nimport ListItem from './ListItem';\nimport AddItem from './AddItem';\n\nconst List = (props) => {\n    return (\n        <div>\n            <div className=\"header\">\n                <div className=\"container title\">\n                    <h3>Your tasks</h3>\n                    <button className={`button button__completed button--${props.showCompleted ? 'hide' : 'show'}`} onClick={props.handleShowCompleted}>{props.showCompleted ? 'Hide' : 'Show'} completed</button>\n                </div>\n            </div>\n            <div className=\"container\">\n                <ul className=\"p-1\">\n                    {\n                        props.tasks.map((task, index) => (\n                            !task.completed || (task.completed && props.showCompleted) ?\n                            <ListItem\n                                id={task.id}\n                                key={index}\n                                task={task.title}\n                                completed={task.completed}\n                                handleDeleteTask={props.handleDeleteTask}\n                                handleCompleteTask={props.handleCompleteTask}\n                            />\n                            : ''\n                        ))\n                    }\n                    <li>  \n                        <AddItem \n                            handleAddTask={props.handleAddTask}\n                        />\n                    </li>\n                </ul>\n            </div>\n        </div>\n    )\n}\n\nexport default List;","import React, { Component } from 'react';\nimport List from './List';\n\nexport class TaskManager extends Component {\n    state = {\n        tasks: [],\n        showCompleted: true\n    }\n\n    componentDidMount() {\n        const json = localStorage.getItem('tasks');\n        const tasks = JSON.parse(json);\n\n        if (tasks) this.setState(() => ({ tasks }));\n    }\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.tasks.length !== this.state.tasks.length) {\n            this.saveToLocalStorage();\n        }\n    }\n\n    saveToLocalStorage = () => {\n        const json = JSON.stringify(this.state.tasks);\n        localStorage.setItem('tasks', json);\n    }\n\n    handleAddTask = (task) => {\n        this.setState((prevState) => ({\n            tasks: [...prevState.tasks, ...[{id:`${Date.now()}-${task}`, title: task, completed: false}]]\n        }));\n    }\n\n    handleDeleteTask = (taskToRemove) => {\n        this.setState((prevState) => ({\n            tasks: prevState.tasks.filter((task) => taskToRemove !== task.id)\n        }));\n    }\n\n    handleCompleteTask = (taskToComplete) => {\n        const tasks = this.state.tasks;\n        // Find index of taskToComplete\n        const i = tasks.indexOf(tasks[tasks.findIndex((task) => task.id === taskToComplete)]);\n        // Toggle completed value of task\n        tasks[i].completed = !tasks[i].completed;\n        this.setState({\n            tasks: tasks\n        });\n        this.saveToLocalStorage();\n    }\n\n    handleShowCompleted = (e) => {\n        e.preventDefault();\n        this.setState({\n            showCompleted: !this.state.showCompleted\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <List \n                    tasks={this.state.tasks}\n                    showCompleted={this.state.showCompleted}\n                    handleAddTask={this.handleAddTask}\n                    handleDeleteTask={this.handleDeleteTask}\n                    handleCompleteTask={this.handleCompleteTask}\n                    handleShowCompleted={this.handleShowCompleted}\n                />\n            </div>\n        )\n    }\n}\n\nexport default TaskManager;\n","import React from 'react';\nimport './App.css';\nimport TaskManager from './components/TaskManager';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TaskManager />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}